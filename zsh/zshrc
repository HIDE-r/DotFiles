:<< powerlevel10k
# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi
powerlevel10k

installed () {
	command -v "$1" >/dev/null 2>&1
}

running () {
	pgrep "$1" > /dev/null 2>&1
}

#HISTFILE=~/.histfile
#HISTSIZE=10000
#SAVEHIST=10000

#setopt inc_append_history
#setopt hist_ignore_dups
#setopt share_history
#setopt incappendhistory

# no beep
unsetopt beep

# setopt auto_cd

# vim key
#bindkey -v

declare -A ZINIT
ZINIT[NO_ALIASES]=1

# The following lines were added by compinstall
zstyle :compinstall filename '/home/collin/.zshrc'
# End of lines added by compinstall

ZINIT_HOME="${HOME}/DotFiles/.zinit/"
source "${ZINIT_HOME}/zinit.zsh"

# load - with reporting/investigating.
# light - without reporting/investigating.
ZINIT_LOAD_METHOD="load"

if [ ${ZINIT_LOAD_METHOD} = "light" ]; then
	ZINIT_LIGHT_MODE="light-mode"
else
	ZINIT_LIGHT_MODE=""
fi

# lucid - skip Loaded ... message under prompt for wait
# notify - Output given message under-prompt after successfully loading a plugin/snippet
ZINIT_TURBO_OPTION="lucid"

### Proxy Setting
#
proxy="192.168.192.1:7890"
sock_proxy="192.168.192.1:7890"
if running brook; then
  proxy="127.0.0.1:1080";
  sock_proxy="$proxy"
fi
if running clash; then
    proxy="127.0.0.1:7890"
    sock_proxy="127.0.0.1:7891"
fi
if running clash-linux; then
    proxy="127.0.0.1:7890"
    sock_proxy="127.0.0.1:7890"
fi
alias setss='export https_proxy="http://${proxy}";export http_proxy="http://${proxy}";export all_proxy="socks5://${sock_proxy}";'
alias unsetss='unset all_proxy'

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
#zinit light-mode for \
#    zdharma-continuum/z-a-rust \
#    zdharma-continuum/z-a-as-monitor \
#    zdharma-continuum/z-a-patch-dl \
#    zdharma-continuum/z-a-bin-gem-node

# Note: 新的shell中需要先回车一下同步最新的history
# zinit snippet https://${ZINIT_RAW_GITHUB}/kutsan/zsh-system-clipboard/master/zsh-system-clipboard.zsh

cat /proc/$PPID/comm | grep wezterm >/dev/null 2>&1 && ZSH_TMUX_AUTOSTART=true

ZSH_TMUX_AUTOCONNECT=false
ZSH_TMUX_DEFAULT_SESSION_NAME=$(\
	tmux list-sessions 2>/dev/null| \
	sed -rn '/^[0-9]+:.*/p' | awk -F ':' 'BEGIN {max=0}{ if($1 > max){max=$1} } END {print max}' | \
	awk -v session_counter=$(tmux list-sessions 2>/dev/null | wc -l) '{ if(session_counter == 0){print 0}else{print ($0 < session_counter) ? session_counter:$0+1} }' \
)
ZSH_TMUX_FIXTERM=false
#zinit snippet OMZ::lib/completion.zsh
#zinit snippet OMZ::lib/key-bindings.zsh
#zinit snippet OMZ::lib/theme-and-appearance.zsh

zinit  ${ZINIT_TURBO_OPTION} ${ZINIT_LIGHT_MODE} for \
	OMZP::tmux \
	OMZ::lib/history.zsh \
	OMZP::vi-mode \
	wait	OMZP::sudo \
	wait"1"	OMZP::colored-man-pages \
	wait"1"	OMZP::extract \

zinit ice atload'bindkey "$terminfo[kcuu1]" history-substring-search-up; bindkey "$terminfo[kcud1]" history-substring-search-down; bindkey "^P" history-substring-search-up; bindkey "^N" history-substring-search-down'
zinit ${ZINIT_LOAD_METHOD} zsh-users/zsh-history-substring-search

# vi 模式剪切板复制到系统
# zinit ice wait ${ZINIT_TURBO_OPTION}
# zinit ${ZINIT_LOAD_METHOD} kutsan/zsh-system-clipboard
# ZSH_SYSTEM_CLIPBOARD_METHOD=wlc

# 语法高亮
zinit ice wait ${ZINIT_TURBO_OPTION}
zinit ${ZINIT_LOAD_METHOD} zdharma-continuum/fast-syntax-highlighting


# 补全
zinit ice wait ${ZINIT_TURBO_OPTION} blockf
zinit ${ZINIT_LOAD_METHOD} zsh-users/zsh-completions

# eza
if ! installed eza; then
zinit ice as"program" from"gh-r" pick="eza"
zinit ${ZINIT_LOAD_METHOD} eza-community/eza
fi

# bat
if ! installed bat; then
zinit ice as"program" from"gh-r" pick="*/bat"
zinit ${ZINIT_LOAD_METHOD} sharkdp/bat
fi

# fd
if ! installed fd; then
zinit ice as"program" from"gh-r" pick="*/fd"
zinit ${ZINIT_LOAD_METHOD} sharkdp/fd
fi

# ripgrep
if ! installed rg; then
zinit ice as"program" from"gh-r" pick="*/rg"
zinit ${ZINIT_LOAD_METHOD} BurntSushi/ripgrep
fi

if ! installed lf; then
zinit ice as"program" from"gh-r" pick="lf"
zinit ${ZINIT_LOAD_METHOD} gokcehan/lf
fi

# https://github.com/gokcehan/lf/blob/master/etc/lfcd.sh
lfcd () {
    tmp="$(mktemp)"
    lf -last-dir-path="$tmp" "$@"
    if [ -f "$tmp" ]; then
        dir="$(cat "$tmp")"
        rm -f "$tmp"
        if [ -d "$dir" ]; then
            if [ "$dir" != "$(pwd)" ]; then
                cd "$dir"
            fi
        fi
    fi
}

bindkey -s '^o' 'lfcd\n'

# yazi
# function ya() {
# 	local tmp="$(mktemp -t "yazi-cwd.XXXXX")"
# 	yazi "$@" --cwd-file="$tmp"
# 	if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
# 		cd -- "$cwd"
# 	fi
# 	rm -f -- "$tmp"
# }
# bindkey -s '^o' 'ya\n'

# navi
#zinit ice as"program" from"gh-r" pick="navi" \
#	atclone="./navi widget zsh > widget.zsh" \
#	atpull="%atclone" \
#	src="widget.zsh"
zinit ice as"program" from"gh-r" bpick="*x86_64*linux*" pick="navi" 
zinit ${ZINIT_LOAD_METHOD} denisidoro/navi

_navi_call() {
   local result="$(navi "$@" </dev/tty)"
   printf "%s" "$result"
}

_navi_widget() {
   local -r input="${LBUFFER}"
   local -r last_command="$(echo "${input}" | navi fn widget::last_command)"
   local replacement="$last_command"

   if [ -z "$last_command" ]; then
      replacement="$(_navi_call --print)"
   else
      replacement="$(_navi_call --print --query "$last_command")"
   fi

   if [ -n "$replacement" ]; then
      local -r find="${last_command}_NAVIEND"
      previous_output="${input}_NAVIEND"
      previous_output="${previous_output//$find/$replacement}"
   else
      previous_output="$input"
   fi

   zle kill-whole-line
   LBUFFER="${previous_output}"
   region_highlight=("P0 100 bold")
   zle redisplay
}

zle -N _navi_widget
bindkey '^g' _navi_widget


### fzf configuration
## Options to fzf command
export FZF_COMPLETION_TRIGGER='~~'
export FZF_COMPLETION_OPTS='--border --info=inline'
export FZF_DEFAULT_COMMAND='fd -I --type f --strip-cwd-prefix'

export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_CTRL_T_OPTS="
  --walker-skip .git,node_modules,target
  --preview 'bat -n --color=always {}'
  --bind 'ctrl-/:change-preview-window(down|hidden|)'"

export FZF_ALT_C_COMMAND="fd -I --type d --hidden --follow --exclude ".git" ."
# Print tree structure in the preview window
export FZF_ALT_C_OPTS="
  --walker-skip .git,node_modules,target
  --preview 'eza -T -L1 {}'"

# CTRL-/ to toggle small preview window to see the full command
# CTRL-Y to copy the command into clipboard using pbcopy
export FZF_CTRL_R_OPTS="
  --preview 'echo {}' --preview-window up:3:hidden:wrap
  --bind 'ctrl-/:toggle-preview'
  --bind 'ctrl-y:execute-silent(echo -n {2..} | wl-copy)+abort'
  --color header:italic
  --header 'Press CTRL-Y to copy command into clipboard'"

_fzf_compgen_path() {
  fd --hidden --follow --exclude ".git" . "$1"
}

_fzf_compgen_dir() {
  fd --type d --hidden --follow --exclude ".git" . "$1"
}

_fzf_comprun() {
  local command=$1
  shift

  case "$command" in
    cd)           fzf "$@" --preview 'tree -C {} | head -200' ;;
    export|unset) fzf "$@" --preview "eval 'echo \$'{}" ;;
    ssh)          fzf "$@" --preview 'dig {}' ;;
    *)            fzf "$@" ;;
  esac
}


zinit ice lucid as"program" pick="bin/(fzf|fzf-tmux|fzf-preview.sh)" \
	atclone="make install; ./bin/fzf --zsh > _fzf.zsh;" \
	atpull="%atclone" \
	src="_fzf.zsh"
	# multisrc="shell/{completion,key-bindings}.zsh"
zinit ${ZINIT_LOAD_METHOD} junegunn/fzf


#zstyle ':completion:*' menu select

# z 跳转
export _ZO_FZF_OPTS='--exit-0 --height=40% --inline-info --no-sort --reverse --select-1 --preview="eza -la {2..}"'
zinit ice as"program" from"gh-r" \
	atclone"./zoxide init zsh > init.zsh" \
	atpull"%atclone" src"init.zsh"
zinit ${ZINIT_LOAD_METHOD} ajeetdsouza/zoxide

# fzf-tab 替换tab功能
zinit ice wait ${ZINIT_TURBO_OPTION} src"fzf-tab.plugin.zsh"
zinit ${ZINIT_LOAD_METHOD} Aloxaf/fzf-tab

# 自动建议
# Note: 需要在 fzf-tab 后运行, 否则第一个补全与tab有冲突
zinit ice wait ${ZINIT_TURBO_OPTION} atload'_zsh_autosuggest_start'
zinit ${ZINIT_LOAD_METHOD} zsh-users/zsh-autosuggestions

# history 同步
if ! installed atuin; then
	# export ATUIN_NOBIND="true"

	# NOTE: This will overwrite fzf <c-r> key-binding. This is what I want!
	# https://docs.atuin.sh/configuration/key-binding/#disable-up-arrow
	zinit ice lucid as"program" from"gh-r" mv"*/atuin -> atuin" bpick="*x86_64*linux*tar.gz" pick="*/atuin" \
		atclone"./atuin init zsh --disable-up-arrow > init.zsh" \
		atpull"%atclone" src"init.zsh"
	zinit ${ZINIT_LOAD_METHOD} atuinsh/atuin
fi

zinit ice as"program" pick"$ZPFX/bin/git-*" src"etc/git-extras-completion.zsh" make"PREFIX=$ZPFX"
zinit ${ZINIT_LOAD_METHOD} tj/git-extras

# 运行时软件版本管理
zinit ice lucid src"asdf.sh"
zinit ${ZINIT_LOAD_METHOD} asdf-vm/asdf

# 目录环境变量
zinit ice lucid from"gh-r" as"program" mv"direnv* -> direnv" \
    atclone'./direnv hook zsh > zhook.zsh' atpull'%atclone' \
    pick"direnv" src="zhook.zsh"
zinit ${ZINIT_LOAD_METHOD} direnv/direnv


# FIXME:https://github.com/Aloxaf/fzf-tab/issues/424#issuecomment-2073756724
zstyle ':completion:*:complete:networkctl:*' list-grouped true

# disable sort when completing `git checkout`
zstyle ':completion:*:git-checkout:*' sort false
# set descriptions format to enable group support
# NOTE: don't use escape sequences here, fzf-tab will ignore them
zstyle ':completion:*:descriptions' format '[%d]'
# set list-colors to enable filename colorizing
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
# force zsh not to show completion menu, which allows fzf-tab to capture the unambiguous prefix
zstyle ':completion:*' menu no
# preview directory's content with eza when completing cd
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'eza -1 --color=always $realpath'
# switch group using `<` and `>`
zstyle ':fzf-tab:*' switch-group '<' '>'

zstyle ':completion:*' rehash true
###
#### Alias
### 

if installed eza; then
	alias ls='eza'
	alias la='eza -ga'
	alias ll='eza -lgha'
	alias l='eza -lgh'
else
	alias ls='ls --color=auto'
	alias la='ls -a --color=auto'
	alias ll='ls -lha --color=auto'
	alias l='ls -lh --color=auto'
fi

if installed nvim; then
	alias vi='nvim'
	alias vim='nvim'
	alias vimdiff='nvim -d'
	export EDITOR="nvim"
else
	export EDITOR="vim"
fi

if installed bat;then
	alias cat='bat'
fi

if installed rg;then
    alias rg='rg -g '!tags' -g '!cscope.out' -g '!compile_commands.json''
fi

if installed viddy;then
	alias watch='viddy'
fi

if installed tmux;then
	alias clear='clear && tmux run 2>/dev/null && tmux clear-history -t ${TMUX_PANE}'
fi

alias ip='ip -c'
alias cman='man -M /usr/share/man/zh_CN'
alias grep='grep --color=auto --exclude "tags"'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'
alias info='info --vi-keys'

bell_message=$(tmux run 2>/dev/null && tmux display-message -p 'Bell in session ❐ #{session_name} ● #{window_index}:#{window_name}')
alias bell="print '\a'; notify-send -i wezterm -u critical '${bell_message}'"

# \rm to bypass the alias
# alias rm='echo "This is not the command you are looking for. Maybe you need trash-cli !!!"; false'
alias rm='rmtrash'
alias rmdir='rmdirtrash'

export TERMINAL="wezterm start --cwd . -- "
# export TERM=wezterm
export BROWSER=microsoft-edge-stable
export XCURSOR_PATH=~/.local/share/icons:${XCURSOR_PATH}
export MANPAGER="nvim +Man\!"
export MENUCONFIG_COLOR=mono

# ssh agent
export SSH_AUTH_SOCK="${XDG_RUNTIME_DIR}/ssh-agent.socket"

export PATH=/home/collin/.local/bin:${PATH}:/home/collin/Work/Scripts

### 按键绑定
typeset -g -A key

key[Home]="${terminfo[khome]}"
key[End]="${terminfo[kend]}"
key[Insert]="${terminfo[kich1]}"
key[Delete]="${terminfo[kdch1]}"

[[ -n "${key[Home]}"      ]] && bindkey -- "${key[Home]}"       beginning-of-line
[[ -n "${key[End]}"       ]] && bindkey -- "${key[End]}"        end-of-line
[[ -n "${key[Insert]}"    ]] && bindkey -- "${key[Insert]}"     overwrite-mode
[[ -n "${key[Delete]}"    ]] && bindkey -- "${key[Delete]}"     delete-char

:<< powerlevel10k
# powerlevel10k 主题
zinit ice depth"1"
zinit light romkatv/powerlevel10k

[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
powerlevel10k

## starship
#:<< starship
zinit ice as"command" from"gh-r" \
          atclone"./starship init zsh > init.zsh; ./starship completions zsh > _starship" \
          atpull"%atclone" src"init.zsh"
zinit ${ZINIT_LOAD_METHOD} starship/starship
#starship

# cd 的补全目录
autoload -Uz compinit
compinit

zinit cdreplay -q
